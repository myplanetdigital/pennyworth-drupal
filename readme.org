* pennyworth 0.2.2

  #+BEGIN_QUOTE
  Bruce Wayne: Rebuild it. Just the way it was, brick for brick.

  Alfred Pennyworth: *Just* the way it was, sir?

  Bruce Wayne: Yeah. Why?

  Alfred Pennyworth: I thought this might be a good opportunity for improving the foundations.
  #+END_QUOTE

  Based upon the principles of continuous integration, pennyworth will
  help you build assets for any software you use and provides a
  reasonable means to distribute it throughout your nodes. By using a
  well tested package management system under the hood for deployment, you can easily roll back versions and manage node
  level conflicts.

  Jenkins can be configured to search for feature branches, for
  advanced workflows. We've included some examples for basic branch tracking.

  Many example data bags are included that show how to test, build and
  package a variety of projects, including Ruby and Clojure projects.

** Drupal fork
   - this fork will act as means to demonstrate a possible method for making drupal
     more compatible with the continuous delivery paradigm. It is a work in progress
     intended to allow a single "binary" of a drupal site (a deb package) to be
     generated from an install profile in the first "commit stage", which will be
     deployed to any subsequent environments, be it for testing or staging or
     production.
   - due to the nature of having a single install profile suffice for all environments,
     specific methologies will need to be followed. This is a work in progress, but is
     expected to involve a combination of profiler (for its 'base profile' functionality),
     Environment module (for its ability to enable/disable certain modules based on
     settings.php environment flags), features and features_override (to manage the
     configuration that will be enabled/disabled by Environment).

     This will be further documented in the demo install profile itself:
     http://github.com/patcon/demo
   - the demo install profile will itself be nested as a submodule within the demo-deploy
     repo. This repo will contain all the scripts and tests used throughout the deployment
     pipeline, allowing developers full control over the entire pipeline process.
   - The commit stage will be triggered by any changes in either the demo profile or the
     demo-deploy repo. The internal demo submodule will be automatically commited, so that
     the version of the profile will be "pinned" to a specific version of the demo-deploy
     repo (ensuring that a site can be rebuilt in the future exactly as it was at any given
     time.

     the demo-deploy repo can be used as a template for running continuous delivery on your
     own install profile:
     http://github.com/patcon/demo-deploy
   - CURRENT STATE: currently, the commit stage is only partially implemented, and aspects
     of the demo install profile aren't yet fleshed out.
   - TO DO:
     1) add post-install script to deb so that db dump is imported (trigger DB import by
     having an ENV variable set when apt-get installed
     2) Replace reprepro with freight for apt repository storage
     3) implement jenkins build pipeline tool, and add rudimentary testing stage
     4) Add example for deployment, perhaps using heavywater's interesting knife deploy
     tools. Look into rollback options and pre-deploy backup.
     5) Release a vagrant repo to make local development of install profiles more seamless.
     6) Implement a demo feature-set for _dev/_stage/_prod methodology with Environment module.

** vagrant support
   - you can use 'vagrant up' to launch a virtualbox instance based on
     Ubuntu Natty 11.04 amd64 to run pennyworth

** chef cookbooks
*** jenkins
    - Based on Fletcher Nichols' [[https://github.com/fnichol/chef-jenkins][chef-jenkins cookbook]]
*** pennyworth
**** recipe: ssh_keys
     - drops keypairs off for Jenkins, so it can talk to your Git infrastructure later.
**** recipe: remount_ephemeral
     - on ec2, remount the ephemeral device (with an appropriate
       filesystem and such) at a convenient location for jenkins
**** recipe: riak
     - in one of our deployments a pennyworth project required riak,
       so we shipped it
**** recipe: default
     - consumes the pennyworth databag items individually, adding them
       to jenkins and so on.
**** recipe: update_version
     - ships the update_version script which updates the "package"
       data bag versions for each job
*** [[http://mirrorer.alioth.debian.org/][reprepro]]
    - reprepro (formerly known as mirrorer) is a nasty old debian tool
      that you can use to manage an APT repository
    - could easily slot something like
      [[https://github.com/rcrowley/freight][Richard Crowley's freight]] project in here
*** apt
    - upstream opscode cookbook, provides apt repository LWRP which is used to
      install the repository hosted on the jenkins node
*** java
    - upstream opscode cookbook, installs java
*** leiningen
    - installs the leiningen build tool for clojure
** data bags
*** package
    - this allows for an API client to query the chef server for
      available versions
    - can be updated at end-of-build by Jenkins (examples included)
*** pennyworth
    - multiple types of jenkins jobs
**** testing
     - Git based, runs test commands
**** packaging
     - Git based, runs test, build and package commands.
     - Examples included for building packages with fpm
     - Packages built with fpm can be included into a Reprepro package
       repository on the system
** other tools
*** [[https://github.com/jordansissel/fpm][fpm]]
   - fpm allows us to build debian packages out of basically anything,
     including cool stuff like ruby gems and python eggs
   - we use it inside of pennyworth jenkins projects to build
     architecture-specific assets of varying types of projects
** knife deploy plugin
   - to be documented
